function [Yd] = SmartSearch(obj, Y, t)

% Ensures we only make decisions when at a gridpoint.
if norm(Y(1:3)-obj.Waypoints(obj.WP,1:3)') < 1e-2
    
    % Current position and grid point
    x = round(Y(1)/obj.CellSize);
    y = round(Y(2)/obj.CellSize);
    gp = y*obj.GridSize(1) + x;
    tol = 1e-6;
    
    % Num of targets to find
    objs = obj.NumTargets - obj.TargetCount;
    
    if obj.Decisions.Mode
        FoundObj = 1;
    else
        FoundObj = 0;
    end
    
    
    %------------------------------State Identification--------------------
    % Note: SearchStatus is 0 initially, we deal with found object states
    % later.
    SearchStatus = 0;
    
    [state,flag] = IdentifyState(obj, Y, SearchStatus);
    if flag
        fprintf('Error: Previous state: %d\n', obj.Decisions.CurrentState)
        fprintf('Current state values: posx: %d, posy: %d, objs: %d, b: %d\n', x, y, objs, obj.BatteryLevel)
        fprintf('    gps = [ '), fprintf('%d ', obj.Decisions.Gridpoints), fprintf(']\n\n')
    end
    
    obj.Decisions.CurrentState = state;
    
    % Set current grid point as searched
    obj.Decisions.Gridpoints(gp+1) = 0;
    
    % Reset battery if at (0, 0) (and it's empty)
    if abs(x) < tol && abs(y) < tol
        obj.BatteryLevel = obj.MaxBattery - obj.BatteryLossRate;
    else
        obj.BatteryLevel = obj.BatteryLevel - obj.BatteryLossRate;
    end
    
    %------------------------------Decision Making-------------------------
    if ~FoundObj
        dir = obj.Decisions.Transitions.dir(obj.Decisions.Transitions.state == state);
        nextState = obj.Decisions.Transitions.next(obj.Decisions.Transitions.state == state);
        
        % There will be multiple transitions out of the state, but
        % fortunately they're all go in the the same direction
        dir = dir{1};
    else
        % Set directive and find next state, now looking for found object
        % states
        SearchStatus = 1;
        
        dir = 'Identify object';
        [nextState, flag] = IdentifyState(obj, Y, SearchStatus); % get found object state
        if flag
            fprintf('Error: Previous state: %d\n', obj.Decisions.CurrentState)
            fprintf('Current state values: posx: %d, posy: %d, objs: %d, b: %d\n', x, y, objs, obj.BatteryLevel)
            fprintf('    gps = [ '), fprintf('%d ', obj.Decisions.Gridpoints), fprintf(']\n\n')
        end
    end
    
    fprintf('    Current state: %d | Directive: %s | Next state(s):',state, dir)
    fprintf(' %d',nextState)
    fprintf('\n')
    
    % If found object, update state and return to base
    % Else update x and y to reflect the impact of our chosen move.
    if strcmp(dir,'Identify object')
        obj.Decisions.CurrentState = nextState;
        nextState = obj.Decisions.Transitions.next(obj.Decisions.Transitions.state == nextState);
        fprintf('    Current state: %d | Directive: Deposit at base | Next state(s):',state)
        fprintf(' %d',nextState)
        fprintf('\n')
    else
        % Get next grid point to move to
        if strcmp(dir,'east')
            x = x + 1;
        elseif strcmp(dir,'west')
            x = x - 1;
        elseif strcmp(dir,'north')
            y = y + 1;
        elseif strcmp(dir,'south')
            y = y - 1;
        elseif strcmp(dir, '') && state == nextState
            obj.MissionFailure = 1;
        else
            error(['Something is wrong, dir is ',dir])
        end
    end
    
    % Sets waypoint to new x and y locations.
    obj.WP = y*obj.GridSize(1) + x + 1;
    obj.WPcount = obj.WPcount + 1;
end

Yd = obj.Waypoints(obj.WP,:)';

    